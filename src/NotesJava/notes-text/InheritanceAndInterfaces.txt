1. Types of Inheritance in Java
Java supports the following types of inheritance:

Single Inheritance: A subclass inherits from one superclass.

Example:

java
Copy
Edit
class Animal {
    public void eat() {
        System.out.println("Eating...");
    }
}

class Dog extends Animal {
    public void bark() {
        System.out.println("Barking...");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();  // Inherited from Animal
        dog.bark(); // Defined in Dog
    }
}
Multilevel Inheritance: A subclass inherits from a superclass, and that subclass is further inherited by another subclass.

Example:

java
Copy
Edit
class Animal {
    public void eat() {
        System.out.println("Eating...");
    }
}

class Dog extends Animal {
    public void bark() {
        System.out.println("Barking...");
    }
}

class Puppy extends Dog {
    public void play() {
        System.out.println("Playing...");
    }
}

public class Main {
    public static void main(String[] args) {
        Puppy puppy = new Puppy();
        puppy.eat();  // Inherited from Animal
        puppy.bark(); // Inherited from Dog
        puppy.play(); // Defined in Puppy
    }
}
Hierarchical Inheritance: Multiple subclasses inherit from a single superclass.

Example:

java
Copy
Edit
class Animal {
    public void eat() {
        System.out.println("Eating...");
    }
}

class Dog extends Animal {
    public void bark() {
        System.out.println("Barking...");
    }
}

class Cat extends Animal {
    public void meow() {
        System.out.println("Meowing...");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();
        dog.bark();

        Cat cat = new Cat();
        cat.eat();
        cat.meow();
    }
}
Multiple Inheritance (Not allowed directly in Java with classes, but we can achieve this with interfaces): Java does not support multiple inheritance with classes due to potential ambiguity, but we can implement multiple interfaces.

2. Method Overriding
Method Overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass.

The method signature (name, return type, and parameters) must remain the same in the subclass.
Method overriding is used to implement runtime polymorphism.
Example (Method Overriding):
java
Copy
Edit
class Animal {
    public void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    public void sound() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myAnimal = new Animal();
        Animal myDog = new Dog();
        
        myAnimal.sound();  // Prints "Animal makes a sound"
        myDog.sound();     // Prints "Dog barks"
    }
}
In this example, the sound() method is overridden in the Dog class, and the correct method is called based on the object type (runtime polymorphism).

3. super Keyword
The super keyword is used to refer to the superclass (parent class) of the current object. It can be used to:

Access superclass methods
Access superclass constructors
Access superclass fields
Example (Using super):
java
Copy
Edit
class Animal {
    public void eat() {
        System.out.println("Animal is eating");
    }
}

class Dog extends Animal {
    public void eat() {
        super.eat(); // Call the parent class (Animal) eat() method
        System.out.println("Dog is eating");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();
    }
}
Output:

csharp
Copy
Edit
Animal is eating
Dog is eating
In this example, the super.eat() calls the eat() method from the Animal class before executing the eat() method in the Dog class.

4. Abstract Classes and Methods
An abstract class is a class that cannot be instantiated directly. It can have abstract methods (methods without implementation) that must be implemented by its subclasses.

Abstract Method: A method that is declared without an implementation. It must be overridden in a subclass.
Concrete Method: A method with a defined body, which can be used as-is by subclasses.
Example (Abstract Class and Method):
java
Copy
Edit
abstract class Animal {
    // Abstract method (no body)
    public abstract void sound();
    
    // Concrete method
    public void eat() {
        System.out.println("Eating...");
    }
}

class Dog extends Animal {
    // Providing implementation of abstract method
    public void sound() {
        System.out.println("Barking...");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal dog = new Dog();
        dog.sound(); // Prints "Barking..."
        dog.eat();   // Prints "Eating..."
    }
}
In this example, the sound() method is abstract in the Animal class and is implemented in the Dog class.

5. Interfaces
An interface is a contract that specifies what methods a class must implement, but it doesnâ€™t provide any implementation. A class that implements an interface must provide concrete implementations of all the methods defined by the interface.

Interface: A collection of abstract methods.
Implementation: A class that provides the actual behavior for the methods defined by the interface.
Example (Interface):
java
Copy
Edit
interface Animal {
    void sound();
}

class Dog implements Animal {
    public void sound() {
        System.out.println("Barking...");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal dog = new Dog();
        dog.sound();  // Prints "Barking..."
    }
}
In this example, the Dog class implements the Animal interface and provides an implementation for the sound() method.

6. Multiple Inheritance Using Interfaces
Java does not support multiple inheritance using classes (i.e., a class cannot extend multiple classes). However, Java supports multiple inheritance through interfaces. A class can implement multiple interfaces.

Example (Multiple Inheritance Using Interfaces):
java
Copy
Edit
interface Animal {
    void sound();
}

interface Mammal {
    void sleep();
}

class Dog implements Animal, Mammal {
    public void sound() {
        System.out.println("Barking...");
    }
    
    public void sleep() {
        System.out.println("Sleeping...");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sound(); // Prints "Barking..."
        dog.sleep(); // Prints "Sleeping..."
    }
}
In this example, the Dog class implements both Animal and Mammal interfaces, providing implementations for both sound() and sleep() methods.

7. Default and Static Methods in Interfaces
Java 8 introduced default and static methods in interfaces:

Default Methods: You can provide a default implementation of a method in an interface. Subclasses can override it if necessary.
Static Methods: You can define static methods in an interface that are not inherited by implementing classes.
Example (Default and Static Methods in Interfaces):
java
Copy
Edit
interface Animal {
    void sound();
    
    // Default method
    default void eat() {
        System.out.println("Eating...");
    }
    
    // Static method
    static void breathe() {
        System.out.println("Breathing...");
    }
}

class Dog implements Animal {
    public void sound() {
        System.out.println("Barking...");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sound(); // Prints "Barking..."
        dog.eat();   // Prints "Eating..." (default method)
        
        Animal.breathe();  // Prints "Breathing..." (static method)
    }
}
In this example, the eat() method is a default method in the Animal interface, and breathe() is a static method in the same interface.

Summary of Key Topics:
Types of Inheritance: Single, multilevel, hierarchical, and multiple inheritance (via interfaces).
Method Overriding: Subclass provides a specific implementation of a superclass method.
super Keyword: Used to access methods, constructors, and fields of the superclass.
Abstract Classes and Methods: Classes that cannot be instantiated and require subclasses to implement abstract methods.
Interfaces: Define a contract with methods that must be implemented by any class that implements the interface.
Multiple Inheritance with Interfaces: A class can implement multiple interfaces, achieving multiple inheritance.
Default and Static Methods in Interfaces: Interfaces can have default and static methods, allowing implementations and utility functions within interfaces.
