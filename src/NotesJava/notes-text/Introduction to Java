
1. Introduction to Java
Java is a high-level, object-oriented programming language developed by Sun Microsystems (now owned by Oracle) in 1995. 
It is widely used for building applications ranging from web and mobile apps to enterprise systems.

Key Points:

Platform-independent: Java programs can run on any device or operating system with the Java Virtual Machine (JVM). 
Write once, run anywhere (WORA).

Object-Oriented: Java is based on the principles of Object-Oriented Programming (OOP), 
such as classes, objects, inheritance, and polymorphism.

Secure and Robust: Java has built-in features to handle exceptions, 
memory management, and security.


2. Features of Java
Here are some key features that make Java popular:

Simple: Easy to learn and understand.
Platform-independent: Java bytecode can run on any machine with a JVM.
Object-Oriented: Uses real-world modeling with objects and classes.
Robust: Strong memory management and exception handling.
Secure: Protects data from unauthorized access.
Multithreaded: Supports concurrent programming to perform multiple tasks simultaneously.
High Performance: Uses Just-In-Time (JIT) compiler to optimize code execution.

3. Installing JDK and Setting Up the Environment
To write and execute Java programs, you need the Java Development Kit (JDK).

Steps to Install JDK:

Download JDK:
Visit Oracle's official site or OpenJDK.
Download the latest version of the JDK for your operating system.

Install JDK:
Run the downloaded installer and follow the instructions.
Set up Environment Variables:

Add the bin folder of the JDK installation directory to your PATH.
On Windows: Go to System Properties → Advanced → Environment Variables → Edit PATH and add the JDK bin path.
On macOS/Linux: Update your .bashrc or .zshrc file to include:
export PATH=/path/to/jdk/bin:$PATH

Verify Installation:
Open a terminal or command prompt and type:
java -version
You should see the installed version of Java.

4. Writing Your First Java Program (HelloWorld)
Here’s how to write and run your first Java program:

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
Steps:

Save the code in a file named HelloWorld.java.
Open a terminal or command prompt, navigate to the file's directory, and compile it:


javac HelloWorld.java
This generates a file called HelloWorld.class.

Run the program:
java HelloWorld
Output: Hello, World!

5. Java Program Structure
A Java program typically has the following structure:


// This is a comment
public class ClassName {              // Class declaration
    public static void main(String[] args) {  // Main method (entry point)
        // Code to be executed
        System.out.println("Your message");
    }
}
Explanation:

public class ClassName: Defines the class.
public static void main(String[] args): The starting point of the program.
System.out.println("Your message"): Prints a message to the console.
6. Comments in Java
Comments are used to make code more readable and to explain the logic.

Types of Comments:

Single-line comment: Starts with //. Used for brief explanations.


// This is a single-line comment
Multi-line comment: Starts with /* and ends with */. Used for longer descriptions.


/* This is a 
   multi-line comment */
Documentation comment: Starts with /** and ends with */. Used to generate documentation using javadoc.


/**
 * This is a documentation comment.
 * It provides details about the program.
 */