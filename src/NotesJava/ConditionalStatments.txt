1. Conditional Statements
Conditional statements allow you to execute code based on specific conditions.

if, else if, else
The if statement is used to test a condition and execute a block of code if the condition is true. The else if and else are used to test multiple conditions.

Syntax:

java
Copy
Edit
if (condition) {
    // Block of code to be executed if condition is true
} else if (anotherCondition) {
    // Block of code if anotherCondition is true
} else {
    // Block of code if all conditions are false
}
Example:

java
Copy
Edit
int age = 20;

if (age >= 18) {
    System.out.println("You are an adult.");
} else {
    System.out.println("You are a minor.");
}
In this example:

If age >= 18, it will print "You are an adult."
Otherwise, it will print "You are a minor."
switch case
The switch statement is used to select one of many code blocks to be executed. Itâ€™s useful when you have multiple possible values for a variable and want to check them against specific cases.

Syntax:

java
Copy
Edit
switch (expression) {
    case value1:
        // Code to execute if expression equals value1
        break;
    case value2:
        // Code to execute if expression equals value2
        break;
    default:
        // Code to execute if no case matches
}
Example:

java
Copy
Edit
int day = 3;
String dayName;

switch (day) {
    case 1: dayName = "Monday"; break;
    case 2: dayName = "Tuesday"; break;
    case 3: dayName = "Wednesday"; break;
    case 4: dayName = "Thursday"; break;
    case 5: dayName = "Friday"; break;
    case 6: dayName = "Saturday"; break;
    case 7: dayName = "Sunday"; break;
    default: dayName = "Invalid day"; break;
}

System.out.println(dayName);
In this example:

If day is 3, it will print "Wednesday".
2. Looping Statements
Looping statements are used to repeatedly execute a block of code as long as a condition is true.

for loop
The for loop is used when the number of iterations is known beforehand.

Syntax:

java
Copy
Edit
for (initialization; condition; update) {
    // Block of code to be executed
}
Example:

java
Copy
Edit
for (int i = 0; i < 5; i++) {
    System.out.println(i);  // Prints 0, 1, 2, 3, 4
}
Here, the loop starts with i = 0, runs as long as i < 5, and increments i by 1 in each iteration.

while loop
The while loop is used when you donâ€™t know how many times you need to iterate, but you want to loop as long as a condition is true.

Syntax:

java
Copy
Edit
while (condition) {
    // Block of code to be executed
}
Example:

java
Copy
Edit
int i = 0;
while (i < 5) {
    System.out.println(i);  // Prints 0, 1, 2, 3, 4
    i++;
}
In this case, the loop runs as long as i < 5.

do-while loop
The do-while loop is similar to the while loop, but the condition is checked after the block of code is executed, meaning the block of code will always execute at least once.

Syntax:

java
Copy
Edit
do {
    // Block of code to be executed
} while (condition);
Example:

java
Copy
Edit
int i = 0;
do {
    System.out.println(i);  // Prints 0, 1, 2, 3, 4
    i++;
} while (i < 5);
In this case, the loop will execute at least once, even if the condition is false initially.

Enhanced for loop (for-each loop)
The enhanced for loop is used to iterate over arrays or collections (like List, Set, etc.) in a more readable way.

Syntax:

java
Copy
Edit
for (dataType item : collection) {
    // Block of code to be executed for each item
}
Example:

java
Copy
Edit
int[] numbers = {1, 2, 3, 4, 5};
for (int num : numbers) {
    System.out.println(num);  // Prints 1, 2, 3, 4, 5
}
This loop goes through each element in the array numbers and prints it.

3. Control Flow Keywords
These keywords modify the flow of execution within loops or methods.

break
The break statement is used to exit a loop or switch case prematurely.

Example:

java
Copy
Edit
for (int i = 0; i < 10; i++) {
    if (i == 5) {
        break;  // Exits the loop when i equals 5
    }
    System.out.println(i);
}
Output:

Copy
Edit
0
1
2
3
4
continue
The continue statement is used to skip the current iteration of a loop and proceed with the next iteration.

Example:

java
Copy
Edit
for (int i = 0; i < 5; i++) {
    if (i == 3) {
        continue;  // Skips the iteration when i equals 3
    }
    System.out.println(i);
}
Output:

Copy
Edit
0
1
2
4
return
The return statement is used to exit a method and optionally return a value.

Example:

java
Copy
Edit
public int add(int a, int b) {
    return a + b;  // Returns the sum of a and b
}

public static void main(String[] args) {
    int result = add(5, 3);  // Calls the add method
    System.out.println(result);  // Prints 8
}
Summary
Conditional Statements:

Use if, else if, and else to execute code based on conditions.
Use switch to select from multiple cases based on a variableâ€™s value.
Looping Statements:

Use for, while, and do-while for loops.
The enhanced for loop simplifies iteration over collections or arrays.
Flow Control:

Use break to exit loops early.
Use continue to skip to the next iteration in a loop.
Use return to exit methods or return a value.
Let me know if you need further examples or clarifications! ðŸ˜Š
